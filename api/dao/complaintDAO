'use strict';

var mongoose = require('mongoose');
var CUS = mongoose.model('CUS');
var Complaint = mongoose.model('Complaints');


exports.addItem = function (req, res) {

    var newComplaint = new Complaint();
    newComplaint.libelle = req.body.libelle;
    newComplaint.category = req.body.category;
    newComplaint.description = req.body.description;
    newComplaint.state = req.body.state;

    newComplaint.save(function (err, compItem) {
        if (err) {
            console.log(err);
            throw err;
        } else {
            var cus = new CUS({
                'idComplaint': compItem._id,
                //Récupérer lID de USER A VOIR ======>
                'idUser': req.body.idUser
            });
            cus.save(function (err, itemCus) {
                if (err) {
                    res.send({
                        'result': 'error'
                    });
                } else {
                    console.log('sending result to client');
                    compItem.cuss.push(itemCus);
                    console.log(itemCus);
                    compItem.save(function (err) {
                        if (err) {
                            res.send({
                                'result': 'error'
                            });
                        } else {
                            res.jsonp(200, compItem);

                        }
                    });
                }

            });
            console.log(newComplaint.cuss);
        }

    });

};
/**
 * Supprimer une reclamation
 */

exports.remove = function (req, res) {

    Complaint.findByIdAndRemove(req.body.idComplaint, function (err, complItem) {
            console.warn('tableau', complItem.cuss);
            var listCuss = complItem.cuss;
            Complaint.update({_id: complItem._id}, {'$pullAll': {cuss: listCuss}}).exec(function (err) {
                if (err) {
                    res.send({
                        'result': 'error'
                    });
                } else {
                    CUS.remove({ _id: { $in: listCuss }}, function (err) {
                        if (err) {
                            res.send({
                                'result': 'error'
                            });
                        } else {
                            res.jsonp(200);
                        }
                    });
                }
            });

        }
    );


}


/**
 * Editer une reclamation
 */
exports.update = function (req, res) {
    var complaintData = JSON.parse(req.body.complaintData);
    var complaint = new Complaint(complaintData.complaint);

    Complaint.findById(complaint._id, function (err, item) {
        if (err) {
            res.send({
                'result': 'error'
            });
        } else {
            item.libelle = complaint.libelle;
            item.category = complaint.category;
            item.description = complaint.description;
            item.state = complaint.state;
            item.save(function (err) {
                if (err) {
                    res.send({
                        'result': 'error'
                    });
                } else {
                    res.jsonp(200, item);
                }
            });
        }
    });
};

exports.getAllComplaints = function (req, res) {

    Complaint.find({})
        .populate({path: 'cuss', options: { sort: {'dateOperation': -1}}})
        .exec(function (err, complaints) {
            if (err) {
                return res.jsonp(500, {
                    'code': -1,
                    'message': 'Erreur lors de la recuperation'
                });
            } else {
                return res.jsonp(200, complaints);
            }
        });
};


exports.getComplaintById = function (req, res) {
    var id = req.body.idComplaint;

    Complaint
        .findById(id)
        .populate({path: 'cuss', options: { sort: {'dateOperation': -1}}})
        .exec(function (err, reclamation) {
            if (err) {
                return res.jsonp(400, {
                    'reclamation': 'une erreur innatendu '
                });
            } else {
                return res.jsonp(200, reclamation);
            }
        });
};

exports.findAllComplaintsByUserId = function (req, res) {
    var idUser = req.body.idUser;
    CUS.find({'idUser': idUser})
        .select('idComplaint')
        .exec(function (err, cuss) {
            if (err) {
                return res.jsonp(400, {
                    'reclamation': 'une erreur innatendu '
                });
            } else {
                var compIds = [];
                if (cuss) {
                    cuss.forEach(function (item) {
                        if (item.idComplaint && compIds.indexOf(item.idComplaint.toString()) < 0) {
                            compIds.push(item.idComplaint.toString());
                        }
                    });
                }

                if (compIds.length > 0) {
                    Complaint.find({ _id: { $in: compIds }})
                        .populate({path: 'cuss', options: { sort: {'dateOperation': -1}}})

                        .exec(function (err, complaints) {
                            if (err) {
                                return res.jsonp(500, {
                                    'code': -1,
                                    'message': 'Erreur lors de la recuperation'
                                });
                            } else {
                                return res.jsonp(200, complaints);
                            }
                        });
                } else {
                    return res.jsonp(200, []);
                }

            }
        });


};